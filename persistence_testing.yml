---
- hosts: target_hosts
#- hosts: localhost
  gather_facts: false
  vars:
    myvars: {}
   
  tasks:
    # Only works in Tower if tmpdir is added to
    # Configuraration= -> Jobs -> Path to expose ot isolated jobs 
    - name: persist ov_hardware_name to local file
      lineinfile:
         path: "{{ tmpdir }}/oneview_deployment.state"
         ##regexp: "{{Â inventory_hostname }}"
         #line: "{{ inventory_hostname }}: {{ ansible_facts['server_hardware']['name'] }}"
         line: "xx: 123 }}"
         state: present
         create: yes
      delegate_to: localhost
 
     # only read local files no matter what you delegate
    - name: read ov_hardware_names from file
      include_vars:
        file: "{{ tmpdir }}/oneview_deployment.state"
        name: ovhostnamelist

    - name: see what we got
      debug:
         var: ovhostnamelist

    - name: see what we got
      debug:
         var: ovhostnamelist.g1

    - name: see what we got
      debug:
         var: ovhostnamelist['g1']

    - name: see what we got
      debug:
         var: ovhostnamelist[inventory_hostname]


    - name:
      fail:

# now i also get each line transfered into key/value pair stored in a dict
    - name: read remote file
      slurp:
         src: "{{ tmpdir }}/oneview_deployment.state"
      register: ovhostnamestring
      delegate_to: bastion21  

    - name: see what we got
      debug:
        var: (ovhostnamestring.content | b64decode) 
      delegate_to: bastion21  

    - name: try to split file
      set_fact: {
        myvars: "{{ myvars | combine( { item.split(':')[0]: item.split(':')[1] } ) }}"
              }
      loop:
        ##"{{ (lookup('file', tmpdir ~ '/oneview_deployment.state')).split('\n') }}"
        "{{ (ovhostnamestring.content | b64decode).split('\n') }}"
      delegate_to: bastion21  


    - name: see what we got
      debug:
        var: myvars
      delegate_to: bastion21  

    - name: see what we got
      debug:
        var: myvars.g2
      delegate_to: bastion21  

